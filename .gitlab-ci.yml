# This is the main gitlab ci configuration. (https://docs.gitlab.com/ee/ci/yaml/)

include:
  - local: '/ci/abstract_jobs.yml'
  - local: '/ci/ci-config.yml'

stages:
  - build1
  - build2
  - test
  - deploy
  - housekeeping
  - housekeeping-cleanup

workflow:
  rules:
    - if: $RUN_CI_PIPELINE == "false"
      when: never
    - if: $CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_REF_NAME =~ /(^feat)|(^pu)|(change)/
      when: never
    - when: always

# ============ stage: build1-2 ===========================
# This stage builds all docker images
#
# The images are named according to $REGISTRY/$NAME-commit:$CI_PIPELINE_ID-$PHP_VERSION.
#
# Gitlab currently dose not support needs in the same stage.
# Therefore we need multiple build stages.

.docker_build_source:
  extends: .abstract_jobs.docker
  stage: build1
  script:
    - cp $DOCKER_GIT_CONFIG ./ci/dockerimage/.gitconfig
    - build_or_reuse_image base $REUSE_IMAGES
    - build_or_reuse_image source $REUSE_IMAGES
    - build_or_reuse_image test-source $REUSE_IMAGES
  timeout: 60m
  interruptible: true
docker_build_source_reuse:
  extends: .docker_build_source
  variables:
    REUSE_IMAGES: "true"
  rules:
    - if: &TESTS_NEEDING_BUILT_IMAGE $RUN_ALL_TESTS == "true" || $PHP_UNIT_ALL_TESTS_BUILT == "true" || $PHP_UNIT_NOGITLABCI_TESTS_BUILT == "true" || $PHP_UNIT_ALL_TESTS_BUILT_WITH_LDAP == "true" || $TEST_WITH_HEALTH_CHECK == "true"
      when: never
    - if: &DEPLOYS_NEEDING_BUILT_IMAGE $PUSH_BUILT_IMAGE_TO_GITLAB == "true" || $PUSH_TO_DOCKERHUB == "true"
      when: never
    - if: &DEPLOYS_NEEDING_DEV_IMAGE $PUSH_DEV_IMAGE_TO_GITLAB == "true" || $PUSH_TO_DOCKERHUB == "true"
      when: never
    - when: on_success
docker_build_source_build:
  extends: .docker_build_source
  variables:
    REUSE_IMAGES: "false"
  rules:
    - if: *TESTS_NEEDING_BUILT_IMAGE
      when: on_success
    - if: *DEPLOYS_NEEDING_BUILT_IMAGE
      when: on_success
    - if: *DEPLOYS_NEEDING_DEV_IMAGE
      when: on_success
    - when: never

docker_build_built:
  extends: .abstract_jobs.docker
  stage: build2
  script:
    - build_image build
    - build_image built
    - build_image test-built
  rules:
    - if: *TESTS_NEEDING_BUILT_IMAGE
      when: on_success
    - if: *DEPLOYS_NEEDING_BUILT_IMAGE
      when: on_success
    - when: never
  timeout: 120m
  interruptible: true

docker_build_dev:
  extends: .abstract_jobs.docker
  stage: build2
  script:
    - build_image dev
  rules:
    - if: *DEPLOYS_NEEDING_DEV_IMAGE
      when: on_success
    - when: never
  timeout: 60m # time run: 28m
  interruptible: true

housekeeping_uninterruptible:
  variables:
    KUBERNETES_CPU_REQUEST: 10m
    KUBERNETES_MEMORY_REQUEST: 100Mi
    GIT_STRATEGY: none
  stage: build1
  interruptible: false
  allow_failure: true
  script:
    - >-
      echo "This job dose not build anything.";
      echo "Its is only here to make the pipeline uninterruptible.";
      echo "This job should not run for merge requests and feature branches,";
      echo "but it should run on main branches and for customer apps.";
      echo "";
      echo "gitlab-ci.yml ref:"; 
      echo "  interruptible:";
      echo "    When Auto-cancel redundant pipelines is enabled, a pipeline is";
      echo "    immediately canceled when a new pipeline starts on the same";
      echo "    branch if either of the following is true:";
      echo "    - All jobs in the pipeline are set as interruptible.";
      echo "    - Any uninterruptible jobs have not started yet.";
  rules:
    - if: $CI_COMMIT_REF_NAME =~ /(^feat)|(^pu)|(change)/
      when: never
    - when: on_success

# ============ stage: test ===========================
# This stage runs all tests.

"php unit: all tests source":
  extends: .abstract_jobs.php_unit
  variables:
    ARG_IMAGE: test-source-commit
    ARG_COPY_SOURCE: "true"
    NODE_TOTAL: 1
    NODE_INDEX: 1
  stage: test
  timeout: 45m
  interruptible: true
  rules:
    - if: $PHP_UNIT_ALL_TESTS_SOURCE == "never"
      when: never
    - if: $PHP_UNIT_ALL_TESTS_SOURCE_PARALLEL == "true"
      when: never
    - if: $RUN_ALL_TESTS == "true"
      when: on_success
    - if: $PHP_UNIT_ALL_TESTS_SOURCE == "true"
      when: on_success
    - when: never

"php unit: all tests source, parallel":
  extends: .abstract_jobs.php_unit
  variables:
    ARG_IMAGE: test-source-commit
    ARG_COPY_SOURCE: "true"
  stage: test
  timeout: 45m
  parallel: 5
  interruptible: true
  rules:
    - if: $PHP_UNIT_ALL_TESTS_SOURCE == "never"
      when: never
    - if: $PHP_UNIT_ALL_TESTS_SOURCE_PARALLEL == "false"
      when: never
    - if: $RUN_ALL_TESTS == "true"
      when: on_success
    - if: $PHP_UNIT_ALL_TESTS_SOURCE == "true"
      when: on_success
    - when: never

"php unit: servertests source":
  extends: .abstract_jobs.php_unit
  variables:
    ARG_IMAGE: test-source-commit
    ARG_COPY_SOURCE: "true"
    ARG_TEST: AllServerTests
  stage: test
  timeout: 30m
  interruptible: true
  rules:
    - if: $PHP_UNIT_SERVERTESTS == "never"
      when: never
    - if: $RUN_ALL_TESTS == "true"
      when: on_success
    - if: $PHP_UNIT_SERVERTESTS == "true"
      when: on_success
    - when: never

"php unit: tests with postfixmultiinstance":
  extends: .abstract_jobs.php_unit
  variables:
    ARG_IMAGE: test-source-commit
    ARG_COPY_SOURCE: "true"
    ARG_POSTFIX_INIT_SQL_PATH: /config/sql/postfixmultiinstance_tables.sql
    TINE20_EMAIL_SMTP: "active:true,backend:postfixmultiinstance,hostname:postfix,port:25,ssl:none,auth:none,name:postfix,primarydomain:mail.test,instanceName:tine.test,postfixmultiinstance_host:db,postfixmultiinstance_dbname:postfix,postfixmultiinstance_username:tine20,postfixmultiinstance_password:tine20pw"
  stage: test
  timeout: 45m
  interruptible: true
  parallel: 5
  rules:
    - if: $PHP_UNIT_TESTS_POSTFIXMULTIINSTANCE == "never"
      when: never
    - if: $RUN_ALL_TESTS == "true"
      when: on_success
    - if: $PHP_UNIT_TESTS_POSTFIXMULTIINSTANCE == "true"
      when: on_success
    - when: never

"php unit: setup tests source":
  extends: .abstract_jobs.php_unit
  variables:
    ARG_IMAGE: test-source-commit
    ARG_COPY_SOURCE: "true"
    ARG_TEST_PATH_FROM_TINE20ROOT: tests/setup/
  stage: test
  timeout: 90m
  interruptible: true
  rules:
    - if: $PHP_UNIT_SETUP_TESTS == "never"
      when: never
    - if: $RUN_ALL_TESTS == "true"
      when: on_success
    - if: $PHP_UNIT_SETUP_TESTS == "true"
      when: on_success
    - changes:
        - tine20/Setup/**/*
    - when: never

"check php version":
  stage: test
  image:
    name: "$REGISTRY/test-source-commit:$CI_PIPELINE_ID-$PHP_VERSION"
  script:
    - echo "PHP version shoud be ${PHP_VERSION}."
    - echo "PHP version is $(php -r 'echo PHP_VERSION;')"
    - "[[ $(php -r 'echo PHP_VERSION;') == $PHP_VERSION.* ]]"
  rules:
    - if: $CHECK_PHP_VERSION == "never"
      when: never
    - if: $RUN_ALL_TESTS == "true"
      when: on_success
    - if: $CHECK_PHP_VERSION == "true"
      when: on_success
    - when: never
  allow_failure: true
  timeout: 20m # time run: 4m
  interruptible: true

"phpstan: code analyses":
  extends: .abstract_jobs.copy_source
  stage: test
  image:
    name: "$REGISTRY/test-source-commit:$CI_PIPELINE_ID-$PHP_VERSION"
  script:
    - cd $TINE20ROOT
    - composer require phpstan/phpstan
    - php -d memory_limit=2G $TINE20ROOT/vendor/bin/phpstan analyse --autoload-file=$TINE20ROOT/tine20/vendor/autoload.php --error-format=gitlab --no-progress -vvv | tee $CI_PROJECT_DIR/code-quality-report.json
  artifacts:
    reports:
      codequality: code-quality-report.json
    paths:
      - code-quality-report.json
    expire_in: 1 days
  rules:
    - if: $PHP_STAN_ANALYSES == "never"
      when: never
    - if: $RUN_ALL_TESTS == "true"
      when: on_success
    - if: $PHP_STAN_ANALYSES == "true"
      when: on_success
    - when: never
  allow_failure: true
  timeout: 20m # time run: 4m
  interruptible: true

"js: end to end tests source":
  extends: .abstract_jobs.e2e_test
  variables:
    ARG_COPY_SOURCE: "true"
    ARG_IMAGE: test-source-commit
  interruptible: true
  rules:
    - if: $JS_E2E_TEST_SOURCE == "never"
      when: never
    - if: $RUN_ALL_TESTS == "true"
      when: on_success
    - if: $JS_E2E_TEST_SOURCE == "true"
      when: on_success
    - when: never

"php unit: all tests built":
  extends: .abstract_jobs.php_unit
  variables:
    ARG_IMAGE: test-built-commit
  stage: test
  parallel: 5
  timeout: 45m
  interruptible: true
  rules:
    - if: $PHP_UNIT_ALL_TESTS_BUILT == "never"
      when: never
    - if: $RUN_ALL_TESTS == "true"
      when: on_success
    - if: $PHP_UNIT_ALL_TESTS_BUILT == "true"
      when: on_success
    - when: never

"php unit: nogitlabci tests built":
  extends: .abstract_jobs.php_unit
  variables:
    ARG_IMAGE: test-built-commit
    ARG_EXCLUDE_GROUP: ""
    ARG_GROUP: "nogitlabci"
  stage: test
  parallel: 5
  allow_failure: true
  timeout: 30m
  interruptible: true
  rules:
    - if: $PHP_UNIT_NOGITLABCI_TESTS_BUILT == "never"
      when: never
    - if: $RUN_ALL_TESTS == "true"
      when: on_success
    - if: $PHP_UNIT_NOGITLABCI_TESTS_BUILT == "true"
      when: on_success
    - when: never

"php unit: all tests built with ldap":
  extends: .abstract_jobs.php_unit_ldap
  variables:
    ARG_IMAGE: test-built-commit
  stage: test
  parallel: 5
  timeout: 30m
  interruptible: true
  rules:
    - if: $PHP_UNIT_ALL_TESTS_BUILT_WITH_LDAP == "never"
      when: never
    - if: $RUN_ALL_TESTS == "true"
      when: on_success
    - if: $PHP_UNIT_ALL_TESTS_BUILT_WITH_LDAP == "true"
      when: on_success
    - when: never

"test with health check":
  extends: .abstract_jobs.php_unit
  variables:
    ARG_IMAGE: test-built-commit
  stage: test
  timeout: 20m
  script:
    - sleep 120s
    - curl -v --fail http://127.0.0.1:80/health
  rules:
    - if: $TEST_WITH_HEALTH_CHECK == "never"
      when: never
    - if: $RUN_ALL_TESTS == "true"
      when: on_success
    - if: $TEST_WITH_HEALTH_CHECK == "true"
      when: on_success
    - when: never

# ============ stage: deploy ===========================

# pushes built-commit as built to our gitlab registry.
# They can be accessed essayer.
# They are pushed on every change of a major branch.
"docker push built image to gitlab":
  extends: .abstract_jobs.docker
  stage: deploy
  script:
    - tag_commit_as_gitlab_image built
  rules:
    - if: $PUSH_BUILT_IMAGE_TO_GITLAB == "true"
      when: on_success
    - when: never
  timeout: 20m
  interruptible: false

# pushes dev-commit as dev to our gitlab registry.
# They can be accessed essayer.
# They are pushed on every change of a major branch.
"docker push dev image to gitlab":
  extends: .abstract_jobs.docker
  stage: deploy
  script:
    - tag_commit_as_gitlab_image dev
  rules:
    - if: $PUSH_DEV_IMAGE_TO_GITLAB == "true"
      when: on_success
    - when: never
  timeout: 20m
  interruptible: false

# pushing built-commit as tine20/tine20 to dockerhub.
# The tag is also overwritten and set to $DOCKERHUB_TAG
# This job should only be triggered by a schedule or a manual pipeline trigger
"docker push built and dev image to dockerhub":
  extends: .abstract_jobs.docker
  stage: deploy
  script:
    - tag_commit_as_dockerhub_image built tine20
    - tag_commit_as_dockerhub_image dev dev
  rules:
    - if: $NO_PUSH == "true"
      when: never
    - if: $CI_COMMIT_REF_NAME =~ /(^feat)|(^pu)|(change)/
      when: never
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      when: never
    - if: $PUSH_TO_DOCKERHUB == "true"
      when: on_success
    - when: never
  timeout: 20m
  interruptible: false

# ============ stage: housekeeping ===========================

docker_populate_cache:
  extends: .abstract_jobs.docker
  stage: housekeeping
  script:
    - docker_populate_cache base || true
    - docker_populate_cache source || true
    - docker_populate_cache test-source || true
    - docker_populate_cache build || true
    - docker_populate_cache built || true
    - docker_populate_cache test-built || true
    - docker_populate_cache dev || true
  allow_failure: true # a failure is a problem, but the pipeline should not fail
  interruptible: false
