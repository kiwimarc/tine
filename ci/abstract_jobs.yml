# This file defines common ci jobs.
# They are not run on their own (because they start with ".").
# They are used like function. And parameterised by variables starting with ARG_.

# gitlab services used by test jobs:
.db_service: &abstract_jobs-db_service
  name: "$DATABASE_IMAGE"
  alias: db
.redis_service: &abstract_jobs-redis_service
  name: "$REDIS_IMAGE"
  alias: cache
.postfix_service: &abstract_jobs-postfix_service
  name: dockerregistry.metaways.net/tine20/docker/postfix:1.0.0
  alias: postfix
  # fix service service discovery https://gitlab.com/gitlab-org/gitlab-runner/issues/1042#note_144420147
  entrypoint: ["/bin/sh", "-c", "while [ ! -f /$CI_PROJECT_DIR/hosts_$CI_JOB_ID ]; do sleep 1; done && cat /$CI_PROJECT_DIR/hosts_$CI_JOB_ID > /etc/hosts && postconf -e 'smtp_host_lookup = native' 'lmtp_host_lookup = native' && /bin/sh /root/docker-entrypoint.sh"]
.dovecot_service: &abstract_jobs-dovecot_service
  name: dockerregistry.metaways.net/tine20/docker/dovecot:1.0.1
  alias: dovecot
  entrypoint: ["/bin/sh", "-c", "while [ ! -f /$CI_PROJECT_DIR/hosts_$CI_JOB_ID ]; do sleep 1; done && cat /$CI_PROJECT_DIR/hosts_$CI_JOB_ID > /etc/hosts && /bin/sh /root/docker-entrypoint.sh"]
.ldap_service: &abstract_jobs-ldap_service
  name: dockerregistry.metaways.net/tine20/docker/ldap:1.0.0
  alias: ldap
  entrypoint: ["/container/tool/run", "--copy-service"]

# Has a db, redis and installs tine. Then runs a php unit test.
# $ARG_IMAGE e.g. test-built-commit
# $ARG_EXCLUDE_GROUP optional e.g. longrunning,needsbuild,nogitlabci
# $ARG_TEST e.g. AllTests
# $ARG_FILTER optional e.g. CashBook
# $ARG_GROUP optional e.g nogitlab
.abstract_jobs.php_unit:
  variables:
    MYSQL_HOST: db
    MYSQL_ROOT_PASSWORD: rootpw
    MYSQL_DATABASE: tine20db
    MYSQL_USER: tine20
    MYSQL_PASSWORD: tine20pw
    TINE20_BUILDTYPE: DEVELOPMENT
    TINE20_DATABASE_HOST: db
    TINE20_DATABASE_DBNAME: tine20db
    TINE20_DATABASE_USERNAME: tine20
    TINE20_DATABASE_PASSWORD: tine20pw
    TINE20_SETUPUSER_USERNAME: tine20setup
    TINE20_SETUPUSER_PASSWORD: tine20setup
    TINE20_LOGIN_USERNAME: tine20admin
    TINE20_LOGIN_PASSWORD: tine20admin
    TINE20_ADMIN_EMAIL: tine20admin@mail.test
    TINE20_CREDENTIALCACHESHAREDKEY: realysecreatkey
    TINE20_CACHING_BACKEND: Redis
    TINE20_CACHING_REDIS_HOST: cache
    TINE20_SESSION_BACKEND: Redis
    TINE20_SESSION_HOST: cache
    TINE20_APPLICATION_TO_INSTALL: all
    TINE20_LOGGER_FILENAME: $CI_PROJECT_DIR/tine20.log
    TINE20_LOGGER_PRIORITY: 7
    TINE20_LOGGER_ADDITIONALWRITERS_FILENAME: /var/log/tine20/tine20.log # do not log to php://stdout it breaks php unit 8.5 processIsolation
    TINE20_EMAIL_IMAP: "active:true,host:dovecot,port:143,useSystemAccount:1,ssl:none,verifyPeer:0,backend:dovecot_imap,domain:mail.test,instanceName:tine.test,dovecot_host:db,dovecot_dbname:dovecot,dovecot_username:tine20,dovecot_password:tine20pw,dovecot_uid:vmail,dovecot_gid:vmail,dovecot_home:/var/vmail/%d/%u,dovecot_scheme:SSHA256"
    TINE20_EMAIL_SMTP: "active:true,backend:postfix,hostname:postfix,port:25,ssl:none,auth:none,name:postfix,primarydomain:mail.test,instanceName:tine.test,postfix_host:db,postfix_dbname:postfix,postfix_username:tine20,postfix_password:tine20pw"
    TINE20_EMAIL_SIEVE: "hostname:dovecot,port:4190,ssl:none"
    NODE_TOTAL: $CI_NODE_TOTAL
    NODE_INDEX: $CI_NODE_INDEX
    TINE20_ACCEPTED_TERMS_VERSION: 1000
    ARG_EXCLUDE_GROUP: longrunning,needsbuild,nogitlabci
    ARG_TEST: AllTests
    ARG_FILTER: $PHPUNIT_FILTER
    ARG_TEST_PATH_FROM_TINE20ROOT: tests/tine20/
  services:
    - *abstract_jobs-db_service
    - *abstract_jobs-redis_service
    - *abstract_jobs-postfix_service
    - *abstract_jobs-dovecot_service
  before_script:
    - cp /etc/hosts "${CI_PROJECT_DIR}/hosts_${CI_JOB_ID}"
    - /usr/sbin/confd -onetime -backend env
    - tine20_await_db
    - tine20_setup_mail
    - tine20_install
    - supervisord
  image:
    name: ${REGISTRY}/${ARG_IMAGE}:${CI_PIPELINE_ID}-${PHP_IMAGE_TAG}
  script:
    - test -f ${TINE20ROOT}/scripts/postInstallGitlab.sh && ${TINE20ROOT}/scripts/postInstallGitlab.sh
    - echo cd ${TINE20ROOT}/${ARG_TEST_PATH_FROM_TINE20ROOT}
    - cd ${TINE20ROOT}/${ARG_TEST_PATH_FROM_TINE20ROOT}
    - cmd="php ${TINE20ROOT}/tine20/vendor/bin/phpunit --color --debug";
      if test -n "${ARG_FILTER}"; then cmd="${cmd} --filter ${ARG_FILTER}"; fi;
      if test -n "${ARG_EXCLUDE_GROUP}"; then cmd="${cmd} --exclude-group ${ARG_EXCLUDE_GROUP}"; fi;
      if test -n "${ARG_GROUP}"; then cmd="${cmd} --group ${ARG_GROUP}"; fi;
      cmd="${cmd} ${ARG_TEST}";
      echo ${cmd};
      echo ${NODE_TOTAL} ${NODE_INDEX};
      ${cmd}
  artifacts:
    paths:
      - tine20.log
    expire_in: 1 day
    when: always

# extends .abstract_jobs.php_unit with ldap.
.abstract_jobs.php_unit_ldap:
  extends: .abstract_jobs.php_unit
  variables:
    LDAP_ORGANISATION: "Tine20 dev"
    LDAP_DOMAIN: "tine.test"
    LDAP_ADMIN_PASSWORD: "admin"
    TINE20_AUTHENTICATION: "bindRequiresDn:1,backend:ldap,host:ldap\\://ldap,port:389,username:cn=admin\\,dc=tine\\,dc=test,password:admin,baseDn:ou=users\\,dc=tine\\,dc=test,accountFilterFormat:(&(objectClass=posixAccount)(uid=%s)),accountCanonicalForm:2"
    TINE20_ACCOUNTS: "backend:ldap,host:ldap\\://ldap,port:389,username:cn=admin\\,dc=tine\\,dc=test,password:admin,userDn:ou=users\\,dc=tine\\,dc=test,groupsDn:ou=groups\\,dc=tine\\,dc=test,defaultUserGroupName:Users,defaultAdminGroupName:Administrators"
  services:
    - *abstract_jobs-db_service
    - *abstract_jobs-redis_service
    - *abstract_jobs-postfix_service
    - *abstract_jobs-dovecot_service
    - *abstract_jobs-ldap_service

# basic docker setup.
.abstract_jobs.docker:
  image: $REGISTRY/docker:19.03.1
  before_script:
    - source ci/build.sh
    - export DOCKER_BUILDKIT=0
    - export PROGRESS_NO_TRUNC=1 # stop docker from truncating aws image names


# merge job for customapps
# $MERGE_TABLE: required {"2018-11":"2019-11","2019-11":"2020-11","2020-11":"master"}
#
# all other jobs should have a rule to not run when $CI_MERGE_REQUEST_TITLE =~ /^Merge/ is true, because
# they would run on the source branch. All test on the source branch wer already run, in a previous pipeline.
#
# .abstract_jobs.customapp.merge_nothing might also be needed in no job runs for a merge merge request
.abstract_jobs.customapp.merge_upwards:
  image:
    name: alpine/git
    entrypoint: ["/bin/sh", "-c"]
  script:
    - apk add jq curl
    - |
      function mergeUpwards() {
        if mergeTarget=$(echo $MERGE_TABLE | jq -e -r --arg name ${CI_COMMIT_REF_NAME} '.[$name]'); then
          if mergeId=$(
            curl -s -f \
              --header "Authorization: Bearer ${GITLAB_TOKEN}" \
              -X POST "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/merge_requests" \
              -d "source_branch=${CI_COMMIT_REF_NAME}" \
              -d "target_branch=${mergeTarget}" \
              -d "title=Merge%20${CI_COMMIT_REF_NAME}%20into%20${mergeTarget}" \
              -d "allow_collaboration=true" \
              -d "assignee_id=${GITLAB_USER_ID}" \
              | jq .iid
          ); then
            sleep 10
            if curl -s -f \
              --header "Authorization: Bearer ${GITLAB_TOKEN}" \
              -X PUT "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/merge_requests/${mergeId}/merge" \
              -d "merge_when_pipeline_succeeds=1" | jq ; then
              echo merged
            else
              echo failed to merge
              exit 1
            fi
          else
            echo failed to create merge request
            exit 1
          fi
        fi
      }
    - mergeUpwards
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      when: never
    - when: on_success

.abstract_jobs.customapp.merge_nothing:
  script:
    - echo At least one job must run for the pipeline to be successful.
  rules:
    - if: $CI_MERGE_REQUEST_TITLE =~ /^Merge/
      when: on_success
    - when: never
