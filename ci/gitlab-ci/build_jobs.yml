# ============ stage: build1-2 ===========================
# This stage builds all docker images
#
# The images are named according to $REGISTRY/$NAME-commit:$CI_PIPELINE_ID-$PHP_VERSION.
#
# Gitlab currently dose not support needs in the same stage.
# Therefore we need multiple build stages.

include:
  - local: '/ci/gitlab-ci/lib.yml'

docker_build_base:
  extends: .abstract_jobs.docker
  stage: build0
  variables:
    GIT_STRATEGY: none
  script:
    - apk add git
    - !reference [.lib, script]
    - git_repo_clone
    - docker_build_image base $(docker_image_hash base)
  timeout: 60m
  interruptible: true

# docker build source or dependecy image
docker_build_source:
  extends: .abstract_jobs.docker
  stage: build1
  variables:
    GIT_STRATEGY: none
  script:
    - apk add git
    - !reference [.lib, script]
    - git_repo_clone
    - export BASE_IMAGE="${REGISTRY}/base:$(docker_image_hash base)";
    - docker_build_image dependency $(docker_image_hash dependency)
    - export DEPENDENCY_IMAGE="${REGISTRY}/dependency:$(docker_image_hash dependency)";
    - |
      if [ "${REUSE_IMAGES}" == true ]; then
        docker_build_image test-dependency $(docker_image_hash test-dependency)
        docker_registry_use_hash_image_as_commit_image test-dependency test-source $(docker_image_hash test-dependency)
      else
        cp $DOCKER_GIT_CONFIG ./ci/dockerimage/.gitconfig
        ${CI_BUILDS_DIR}/${CI_PROJECT_NAMESPACE}/tine20/ci/scripts/reuse_or_build_image.sh source false
        ${CI_BUILDS_DIR}/${CI_PROJECT_NAMESPACE}/tine20/ci/scripts/reuse_or_build_image.sh test-source false
      fi
  timeout: 60m
  interruptible: true
  rules:
    # do not reuse image wenn building build image
    - if: &TESTS_NEEDING_BUILT_IMAGE $RUN_ALL_TESTS == "true" || $PHP_UNIT_ALL_TESTS_BUILT == "true" || $PHP_UNIT_NOGITLABCI_TESTS_BUILT == "true" || $PHP_UNIT_ALL_TESTS_BUILT_WITH_LDAP == "true" || $TEST_WITH_HEALTH_CHECK == "true"
      variables:
        REUSE_IMAGES: "false"
      when: on_success
    # do not reuse image wenn building build image
    - if: &DEPLOYS_NEEDING_BUILT_IMAGE $PUSH_BUILT_IMAGE_TO_GITLAB == "true" || $PUSH_TO_DOCKERHUB == "true"
      variables:
        REUSE_IMAGES: "false"
      when: on_success
    # do not reuse image wenn building dev image
    - if: &DEPLOYS_NEEDING_DEV_IMAGE $PUSH_DEV_IMAGE_TO_GITLAB == "true" || $PUSH_TO_DOCKERHUB == "true"
      variables:
        REUSE_IMAGES: "false"
      when: on_success
    # do not reuse image for tag pipelines
    - if: $CI_COMMIT_TAG
      variables:
        REUSE_IMAGES: "false"
      when: on_success
    - when: on_success

docker_build_built:
  extends: .abstract_jobs.docker
  stage: build2
  script:
    - !reference [.lib, script]
    - export BASE_IMAGE="${REGISTRY}/base:$(docker_image_hash base)";
    - ${CI_BUILDS_DIR}/${CI_PROJECT_NAMESPACE}/tine20/ci/scripts/build_image.sh build
    - ${CI_BUILDS_DIR}/${CI_PROJECT_NAMESPACE}/tine20/ci/scripts/build_image.sh built
    - ${CI_BUILDS_DIR}/${CI_PROJECT_NAMESPACE}/tine20/ci/scripts/build_image.sh test-built
  rules:
    - if: *TESTS_NEEDING_BUILT_IMAGE
      when: on_success
    - if: *DEPLOYS_NEEDING_BUILT_IMAGE
      when: on_success
    - if: $CI_COMMIT_TAG
      when: on_success
    - when: never
  timeout: 120m
  interruptible: true

docker_build_dev:
  extends: .abstract_jobs.docker
  stage: build2
  script:
    - !reference [.lib, script]
    - export BASE_IMAGE="${REGISTRY}/base:$(docker_image_hash base)";
    - ${CI_BUILDS_DIR}/${CI_PROJECT_NAMESPACE}/tine20/ci/scripts/build_image.sh dev
  rules:
    - if: *DEPLOYS_NEEDING_DEV_IMAGE
      when: on_success
    - when: never
  timeout: 60m # time run: 28m
  interruptible: true

docker_build_packages:
  extends: .abstract_jobs.docker
  stage: build3
  script:
    - apk add bash util-linux tar
    - ${CI_BUILDS_DIR}/${CI_PROJECT_NAMESPACE}/tine20/ci/scripts/packaging.sh
  rules:
    - if: $CI_COMMIT_TAG
      when: on_success
    - when: never
  timeout: 120m
  interruptible: true
