# This file is generated!
# source: ci/gitlab-ci/script
# build: ci/gitlab-ci && make lib.yml

.lib:
  script:
    - |
      # ci/gitlab-ci/lib.yml:script
      # lib/docker_build_image.sh
      docker_build_image() {
          local target=$1;
          local hash=$2
      
          echo "building image: target: ${target}; tag: ${hash}";
      
          if [[ "$DOCKER_IMAGE_CACHE" == "false" ]] || ! docker_registry_image_exists ${target} ${hash}; then
              echo "building image ...";
      
              local LAYER_CACHE_IMAGE="${REGISTRY}/${TARGET}:$(echo ${CI_COMMIT_REF_NAME} | sed sI/I-Ig)-${PHP_VERSION}"
              local MAJOR_LAYER_CACHE_IMAGE="${REGISTRY}/${TARGET}:$(echo ${MAJOR_COMMIT_REF_NAME} | sed sI/I-Ig)-${PHP_VERSION}"
      
              cd ${CI_BUILDS_DIR}/${CI_PROJECT_NAMESPACE}/tine20;
      
              cp $DOCKER_GIT_CONFIG ./ci/dockerimage/.gitconfig
              ./ci/dockerimage/make.sh -u -p -i "${REGISTRY}/${target}:${hash}" -c "${LAYER_CACHE_IMAGE}" -c "${MAJOR_LAYER_CACHE_IMAGE}" ${target};
          else
              echo "image exists ...";
          fi;
      }

      # lib/docker_image_hash.sh
      _longest_common_prefix() {
          declare -a names;
          declare -a parts;
          declare i=0;
      
          names=("$@");
          name="$1";
          while x=$(dirname "$name"); [ "$x" != "/" ] && [ "$x" != "." ]; do
              parts[$i]="$x";
              i=$(($i + 1));
              name="$x";
          done;
      
          for prefix in "${parts[@]}" /; do
              for name in "${names[@]}"; do
              if [ "${name#$prefix/}" = "${name}" ]; then
                  continue 2;
              fi;
              done;
              echo "$prefix";
              return;
          done;
          echo ".";
      }
      
      _path_without_prefix() {
          local prefix="$1/";
          shift;
          local arg;
          for arg in "$@"; do
              echo "${arg#$prefix}";
          done;
      }
      
      file_hashes() {
          local pattern=$@;
      
          local lcp=$(_longest_common_prefix $pattern);
          local pwp=$(_path_without_prefix $lcp $pattern);
      
          local pwd=$(pwd);
          cd $lcp;
      
          find $pwp -type f -exec sha256sum {} +;
          if [ ${PIPESTATUS[0]} != 0 ]; then
              exit 1;
          fi;
      
          cd $pwd;
      }
      
      _base_image_hash() {
          cd ${CI_BUILDS_DIR}/${CI_PROJECT_NAMESPACE}/tine20;
          local fh=$(file_hashes ci/dockerimage/base.Dockerfile ci/dockerimage/confd/ ci/dockerimage/scripts/ ci/dockerimage/supervisor.d/ etc/nginx etc/tine20/config.inc.php.tmpl);
              
          echo $fh $TINE20ROOT $PHP_VERSION | sha256sum | head -c 32;
      }
      
      _dependency_image_hash() {
          cd ${CI_BUILDS_DIR}/${CI_PROJECT_NAMESPACE}/tine20;
          local fh=$(file_hashes ci/dockerimage/dependency.Dockerfile tine20/library tine20/composer.json tine20/composer.lock tine20/Tinebase/js/package.json tine20/Tinebase/js/npm-shrinkwrap.json scripts/packaging/composer/composerLockRewrite.php);
      
          echo $fh $TINE20ROOT $(_base_image_hash) | sha256sum | head -c 32;
      }
      
      _test_dependency_image_hash() {
          cd ${CI_BUILDS_DIR}/${CI_PROJECT_NAMESPACE}/tine20;
          local fh=$(file_hashes ci/dockerimage/test-dependency.Dockerfile ci/dockerimage/supervisor.d/webpack.ini etc phpstan.neon phpstan-baseline.neon);
      
          echo $fh $TINE20ROOT $(_dependency_image_hash) | sha256sum | head -c 32;
      }
      
      docker_image_hash() {
          case $1 in
              base)
                  _base_image_hash;
                  ;;
              dependency)
                  _dependency_image_hash;
                  ;;
              test-dependency)
                  _test_dependency_image_hash;
                  ;;
          esac
      }

      # lib/docker_layer_cache.sh
      docker_layer_cache_populat_with_hash_image() {
          target=$1;
          hash=$2;
      
          docker_registry_rename_remote $REGISTRY_USER $REGISTRY_PASSWORD $REGISTRY $target $hash $target $(echo $CI_COMMIT_REF_NAME | sed sI/I-Ig)-$PHP_VERSION;
      }

      # lib/docker_registry.sh
      docker_registry_image_exists() {
          local image=$1;
          local tag=$2;
          curl -s -f --user $REGISTRY_USER:$REGISTRY_PASSWORD -H "accept: application/vnd.docker.distribution.manifest.v2+json" "https://${REGISTRY}/v2/${image}/manifests/${tag}" > /dev/null;
      }
      
      docker_registry_rename_remote() {
          local user=$1;
          local password=$2;
          local registry=$3;
          local old_repo=$4;
          local old_tag=$5;
          local new_repo=$6;
          local new_tag=$7;
      
          echo "$0 retagging $registry $old_repo/$old_tag to $new_repo/$new_tag";
      
          if ! curl -s -f --user $user:$password -H "accept: application/vnd.docker.distribution.manifest.v2+json" https://$registry/v2/$old_repo/manifests/$old_tag > /dev/null; then
              curl -s --user $user:$password -H "accept: application/vnd.docker.distribution.manifest.v2+json" https://$registry/v2/$old_repo/manifests/$old_tag;
              exit 1;
          fi;
      
          manifest=$(curl -s -f -X GET --user $user:$password -H "accept: application/vnd.docker.distribution.manifest.v2+json"  https://$registry/v2/$old_repo/manifests/$old_tag);
      
          for digest in $(echo $manifest | jq -r '.layers[].digest'); do
              curl -s -f -X POST --user $user:$password "https://$registry/v2/$new_repo/blobs/uploads/?mount=$digest&from=$old_repo";
          done;
      
          curl -s -f -X POST --user $user:$password "https://$registry/v2/$new_repo/blobs/uploads/?mount=$(echo $manifest | jq -r '.config.digest')&from=$old_repo";
          curl -s -f -X PUT --user $user:$password -H "Content-Type: application/vnd.docker.distribution.manifest.v2+json" --data "$manifest" https://$registry/v2/$new_repo/manifests/$new_tag;
      }
      
      docker_registry_use_hash_image_as_commit_image () {
          source=$1;
          target=$2;
          hash=$3;
      
          docker_registry_rename_remote $REGISTRY_USER $REGISTRY_PASSWORD $REGISTRY $source $hash ${target}-commit ${IMAGE_TAG};
      }

      # lib/git_repo.sh
      git_repo_clone () {
          git clone ${CI_REPOSITORY_URL} --branch ${CI_COMMIT_REF_NAME} --depth 1 --single-branch ${CI_BUILDS_DIR}/${CI_PROJECT_NAMESPACE}/tine20
      }

